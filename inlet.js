// Generated by CoffeeScript 1.10.0
((function() {
  var HSLCircle, Picker, cssColorToRGB, fmod, hslToCSS, hslToRGB, hueToRGB, isValidCSSColor, map, normalizeColor, rgbToHSL, style, slice = [].slice;
  hueToRGB = function(m1, m2, h) {
    h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;
    if (h * 6 < 1) {
      return m1 + (m2 - m1) * h * 6;
    }
    if (h * 2 < 1) {
      return m2;
    }
    if (h * 3 < 2) {
      return m1 + (m2 - m1) * (.66666 - h) * 6;
    }
    return m1;
  };
  hslToRGB = function(h, s, l) {
    var m1, m2;
    m2 = l <= .5 ? l * (s + 1) : l + s - l * s;
    m1 = l * 2 - m2;
    return {
      r: hueToRGB(m1, m2, h + .33333),
      g: hueToRGB(m1, m2, h),
      b: hueToRGB(m1, m2, h - .33333)
    };
  };
  rgbToHSL = function(r, g, b) {
    var diff, h, l, max, min, s, sum;
    max = Math.max(r, g, b);
    min = Math.min(r, g, b);
    diff = max - min;
    sum = max + min;
    h = min === max ? 0 : r === max ? (60 * (g - b) / diff + 360) % 360 : g === max ? 60 * (b - r) / diff + 120 : 60 * (r - g) / diff + 240;
    l = sum / 2;
    s = l === 0 ? 0 : l === 1 ? 1 : l <= .5 ? diff / sum : diff / (2 - sum);
    return {
      h: h,
      s: s,
      l: l
    };
  };
  hslToCSS = function(h, s, l, a) {
    if (a != null) {
      return "hsla(" + fmod(Math.round(h * 180 / Math.PI), 360) + "," + Math.round(s * 100) + "%," + Math.round(l * 100) + "%," + a + ")";
    } else {
      return "hsl(" + fmod(Math.round(h * 180 / Math.PI), 360) + "," + Math.round(s * 100) + "%," + Math.round(l * 100) + "%)";
    }
  };
  cssColorToRGB = function(cssColor) {
    var b, g, m, r, rgb, s;
    s = document.createElement("span");
    document.body.appendChild(s);
    s.style.backgroundColor = cssColor;
    rgb = getComputedStyle(s).backgroundColor;
    document.body.removeChild(s);
    m = /^rgb\((\d+), (\d+), (\d+)\)$/.exec(rgb);
    if (!m) {
      m = /^rgba\((\d+), (\d+), (\d+), ([\d.]+)\)$/.exec(rgb);
    }
    r = parseInt(m[1]);
    g = parseInt(m[2]);
    b = parseInt(m[3]);
    if (m[4]) {
      return {
        r: r / 255,
        g: g / 255,
        b: b / 255,
        a: parseFloat(m[4])
      };
    }
    return {
      r: r / 255,
      g: g / 255,
      b: b / 255
    };
  };
  isValidCSSColor = function(cssColor) {
    var ret, s;
    s = document.createElement("span");
    document.body.appendChild(s);
    s.style.backgroundColor = cssColor;
    ret = s.style.backgroundColor.length > 0;
    s.remove();
    return ret;
  };
  style = function(tag, styles) {
    var n, v;
    for (n in styles) {
      v = styles[n];
      tag.style[n] = v;
    }
    return tag;
  };
  fmod = function(x, m) {
    x = x % m;
    if (x < 0) {
      x += m;
    }
    return x;
  };
  map = function(v, min, max) {
    return min + (max - min) * Math.min(1, Math.max(0, v));
  };
  HSLCircle = function() {
    function HSLCircle(radius1, width1, lightness) {
      var b, canvas, ctx, d, data, dx, dy, g, h, i, imgdata, j, r, radius, ref, ref1, ref2, s, width, x, y;
      this.radius = radius1;
      this.width = width1;
      this.lightness = lightness;
      radius = this.radius;
      width = this.width;
      canvas = this.canvas = document.createElement("canvas");
      canvas.width = canvas.height = radius * 2;
      ctx = canvas.getContext("2d");
      imgdata = ctx.createImageData(canvas.width, canvas.height);
      data = imgdata.data;
      for (y = i = 0, ref = canvas.height; 0 <= ref ? i < ref : i > ref; y = 0 <= ref ? ++i : --i) {
        for (x = j = 0, ref1 = canvas.width; 0 <= ref1 ? j < ref1 : j > ref1; x = 0 <= ref1 ? ++j : --j) {
          dy = y - radius;
          dx = x - radius;
          d = Math.sqrt(dy * dy + dx * dx);
          if (d > radius + 1.5) {
            continue;
          }
          d -= 10;
          s = Math.max(0, Math.min(1, d / (radius - width / 2 - 10)));
          h = Math.atan2(dy, dx) / (Math.PI * 2);
          ref2 = hslToRGB(h, s, this.lightness), r = ref2.r, g = ref2.g, b = ref2.b;
          data[(y * canvas.width + x) * 4 + 0] = r * 255;
          data[(y * canvas.width + x) * 4 + 1] = g * 255;
          data[(y * canvas.width + x) * 4 + 2] = b * 255;
          data[(y * canvas.width + x) * 4 + 3] = 255;
        }
      }
      ctx.putImageData(imgdata, 0, 0);
    }
    HSLCircle.prototype.drawHSLCircle = function(canvas, saturation) {
      var ctx, highlighted_r, radius, width;
      canvas.width = canvas.height = 2 * this.radius;
      ctx = canvas.getContext("2d");
      width = this.width;
      radius = this.radius;
      highlighted_r = map(saturation, width, radius);
      ctx.save();
      ctx.fillStyle = "rgba(0,0,0,0.3)";
      ctx.beginPath();
      ctx.arc(radius, radius, radius, 0, Math.PI * 2);
      ctx.fill();
      ctx.fillStyle = "black";
      ctx.beginPath();
      ctx.arc(radius, radius, highlighted_r, 0, Math.PI * 2);
      ctx.arc(radius, radius, highlighted_r - width, 0, Math.PI * 2, true);
      ctx.fill();
      ctx.globalCompositeOperation = "source-in";
      ctx.drawImage(this.canvas, 0, 0);
      return ctx.restore();
    };
    return HSLCircle;
  }();
  normalizeColor = function(color) {
    if (typeof color === "string") {
      color = cssColorToRGB(color);
    }
    if (color.r != null && color.g != null && color.b != null) {
      color = rgbToHSL(color.r, color.g, color.b);
      color.h = color.h * Math.PI / 180;
    } else if (color.h != null && color.s != null && color.l != null) {
      color.h = color.h * Math.PI / 180;
    }
    return color;
  };
  Picker = function() {
    var attachEvents, makeCircle, makeColorPreview, makeKnob, makeLightnessSlider, makeRoot, radius, width;
    radius = 80;
    width = 25;
    function Picker(color) {
      this.color = normalizeColor(color);
      this.refColor = this.color;
      this.el = makeRoot();
      this.circleContainer = this.el.appendChild(makeCircle.call(this));
      this.lSlider = this.el.appendChild(makeLightnessSlider.call(this));
      this.colorPreview = this.el.appendChild(makeColorPreview.call(this));
      attachEvents.call(this);
      this.setLightness(this.color.l);
    }
    Picker.prototype.setHue = function(h) {
      var b, oR, r;
      this.color.h = h;
      r = map(this.color.s, width, radius) - width / 2;
      oR = radius - width / 2;
      style(this.hueKnob, {
        left: Math.round(oR + Math.cos(h) * r + 6 - 1) + "px",
        top: Math.round(oR + Math.sin(h) * r + 6 - 1) + "px"
      });
      this.colorPreview.style.backgroundColor = this.lKnob.style.backgroundColor = this.hueKnob.style.backgroundColor = hslToCSS(this.color.h, this.color.s, this.color.l);
      b = hslToCSS(this.color.h, this.color.s, .5);
      this.lSlider.style.backgroundImage = "-webkit-linear-gradient(bottom, black, " + b + " 50%, white)";
      this.lSlider.style.backgroundImage = "-moz-linear-gradient(bottom, black, " + b + " 50%, white)";
      return this.emit("changed");
    };
    Picker.prototype.setSaturation = function(s) {
      this.color.s = s;
      this.circle.drawHSLCircle(this.circleCanvas, s);
      return this.setHue(this.color.h);
    };
    Picker.prototype.setLightness = function(l) {
      this.color.l = l;
      this.circle = new HSLCircle(radius, width, l);
      this.lKnob.style.top = (1 - l) * this.lSlider._height - 11 + "px";
      return this.setSaturation(this.color.s);
    };
    Picker.prototype.setHSL = function(h, s, l) {
      this.color.h = fmod(h, 360) * Math.PI / 180;
      this.color.s = Math.max(0, Math.min(1, s));
      l = Math.max(0, Math.min(1, l));
      return this.setLightness(l);
    };
    Picker.prototype.getHSL = function() {
      return {
        h: fmod(this.color.h * 180 / Math.PI, 360),
        s: this.color.s,
        l: this.color.l
      };
    };
    Picker.prototype.setRGB = function(r, g, b) {
      var h, l, ref, s;
      ref = rgbToHSL(r, g, b), h = ref.h, s = ref.s, l = ref.l;
      return this.setHSL(h, s, l);
    };
    Picker.prototype.getRGB = function() {
      return hslToRGB(this.color.h / (Math.PI * 2), this.color.s, this.color.l);
    };
    Picker.prototype.getCSS = function() {
      return hslToCSS(this.color.h, this.color.s, this.color.l);
    };
    Picker.prototype.setCSS = function(css) {
      var b, g, r, ref;
      ref = cssColorToRGB(css), r = ref.r, g = ref.g, b = ref.b;
      return this.setRGB(r, g, b);
    };
    Picker.prototype.on = function(e, l) {
      var base;
      if (this._listeners == null) {
        this._listeners = {};
      }
      return ((base = this._listeners)[e] != null ? base[e] : base[e] = []).push(l);
    };
    Picker.prototype.emit = function() {
      var args, e, i, l, len, ref, ref1, results;
      e = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (this._listeners) {
        ref1 = (ref = this._listeners[e]) != null ? ref : [];
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          l = ref1[i];
          results.push(l.call.apply(l, [ this ].concat(slice.call(args))));
        }
        return results;
      }
    };
    Picker.prototype.removeListener = function(e, l) {
      var k;
      if (this._listeners[e]) {
        return this._listeners[e] = function() {
          var i, len, ref, results;
          ref = this._listeners[e];
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            k = ref[i];
            if (k !== l) {
              results.push(k);
            }
          }
          return results;
        }.call(this);
      }
    };
    attachEvents = function() {
      var c, updateCursor;
      this.lKnob.onmousedown = function(_this) {
        return function(e) {
          var move, up;
          document.documentElement.style.cursor = "pointer";
          window.addEventListener("mousemove", move = function(e) {
            var r, y;
            r = _this.lSlider.getBoundingClientRect();
            y = e.clientY - r.top;
            return _this.setLightness(Math.max(0, Math.min(1, 1 - y / _this.lSlider._height)));
          });
          window.addEventListener("mouseup", up = function(e) {
            window.removeEventListener("mousemove", move);
            window.removeEventListener("mouseup", up);
            window.removeEventListener("blur", up);
            return document.documentElement.style.cursor = "";
          });
          window.addEventListener("blur", up);
          e.preventDefault();
          return e.stopPropagation();
        };
      }(this);
      c = this.circleContainer;
      updateCursor = function(_this) {
        return function(e) {
          var d, dx, dy, r, t, x, y;
          x = e.layerX;
          y = e.layerY;
          dx = x - radius;
          dy = y - radius;
          d = Math.sqrt(dx * dx + dy * dy);
          t = Math.atan2(dy, dx);
          r = map(_this.color.s, width, radius);
          if (r - width < d && d < r) {
            if (-Math.PI / 8 < t && t < Math.PI / 8 || t >= 7 * Math.PI / 8 || t <= -7 * Math.PI / 8) {
              return c.style.cursor = "ew-resize";
            } else if (Math.PI / 8 <= t && t < 3 * Math.PI / 8 || -7 * Math.PI / 8 < t && t <= -5 * Math.PI / 8) {
              return c.style.cursor = "nwse-resize";
            } else if (3 * Math.PI / 8 <= t && t < 5 * Math.PI / 8 || -5 * Math.PI / 8 < t && t <= -3 * Math.PI / 8) {
              return c.style.cursor = "ns-resize";
            } else if (5 * Math.PI / 8 <= t && t < 7 * Math.PI / 8 || -3 * Math.PI / 8 < t && t <= -Math.PI / 8) {
              return c.style.cursor = "nesw-resize";
            }
          } else {
            return c.style.cursor = "";
          }
        };
      }(this);
      c.addEventListener("mouseover", function(e) {
        var move, out;
        updateCursor(e);
        c.addEventListener("mousemove", move = function(e) {
          return updateCursor(e);
        });
        c.addEventListener("mouseout", out = function(e) {
          c.style.cursor = "";
          c.removeEventListener("mousemove", move);
          c.removeEventListener("mouseout", out);
          return window.removeEventListener("blur", out);
        });
        return window.addEventListener("blur", out);
      });
      c.addEventListener("mousedown", function(_this) {
        return function(e) {
          var d, dx, dy, move, r, t, up, x, y;
          e.preventDefault();
          x = e.layerX;
          y = e.layerY;
          dx = x - radius;
          dy = y - radius;
          d = Math.sqrt(dx * dx + dy * dy);
          t = Math.atan2(dy, dx);
          r = map(_this.color.s, width, radius);
          if (!(r - width < d && d < r)) {
            return;
          }
          document.documentElement.style.cursor = c.style.cursor;
          window.addEventListener("mousemove", move = function(e) {
            var cx, cy, s;
            r = _this.circleCanvas.getBoundingClientRect();
            cx = r.left + r.width / 2;
            cy = r.top + r.height / 2;
            dx = e.clientX - cx;
            dy = e.clientY - cy;
            d = Math.sqrt(dx * dx + dy * dy);
            d -= 10;
            s = Math.max(0, Math.min(1, d / (radius - width / 2 - 10)));
            return _this.setSaturation(s);
          });
          window.addEventListener("mouseup", up = function(e) {
            window.removeEventListener("mousemove", move);
            window.removeEventListener("mouseup", up);
            window.removeEventListener("blur", up);
            return document.documentElement.style.cursor = "";
          });
          return window.addEventListener("blur", up);
        };
      }(this));
      return this.hueKnob.onmousedown = function(_this) {
        return function(e) {
          var move, up;
          document.documentElement.style.cursor = "pointer";
          window.addEventListener("mousemove", move = function(e) {
            var cx, cy, r;
            r = _this.circleCanvas.getBoundingClientRect();
            cx = r.left + r.width / 2;
            cy = r.top + r.height / 2;
            return _this.setHue(Math.atan2(e.clientY - cy, e.clientX - cx));
          });
          window.addEventListener("mouseup", up = function(e) {
            window.removeEventListener("mousemove", move);
            window.removeEventListener("mouseup", up);
            window.removeEventListener("blur", up);
            return document.documentElement.style.cursor = "";
          });
          window.addEventListener("blur", up);
          e.preventDefault();
          return e.stopPropagation();
        };
      }(this);
    };
    makeRoot = function() {
      var div;
      div = document.createElement("div");
      div.className = "picker";
      style(div, {
        display: "inline-block",
        background: "hsl(0, 0%, 97%)",
        padding: "6px",
        borderRadius: "6px",
        boxShadow: "1px 1px 5px hsla(0, 0%, 39%, 0.2), hsla(0, 0%, 100%, 0.9) 0px 0px 1em 0.3em inset",
        border: "1px solid hsla(0, 0%, 59%, 0.2)",
        position: "absolute",
        backgroundImage: "-webkit-linear-gradient(left top, hsla(0, 0%, 0%, 0.05) 25%, transparent 25%, transparent 50%, hsla(0, 0%, 0%, 0.05) 50%, hsla(0, 0%, 0%, 0.05) 75%, transparent 75%, transparent)",
        backgroundSize: "40px 40px"
      });
      style(div, {
        backgroundImage: "-moz-linear-gradient(left top, hsla(0, 0%, 0%, 0.05) 25%, transparent 25%, transparent 50%, hsla(0, 0%, 0%, 0.05) 50%, hsla(0, 0%, 0%, 0.05) 75%, transparent 75%, transparent)",
        zIndex: "1000"
      });
      return div;
    };
    makeCircle = function() {
      var circleContainer, k;
      circleContainer = document.createElement("div");
      style(circleContainer, {
        display: "inline-block",
        width: radius * 2 + "px",
        height: radius * 2 + "px",
        borderRadius: radius + "px",
        boxShadow: "0px 0px 7px rgba(0,0,0,0.3)"
      });
      circleContainer.appendChild(this.circleCanvas = document.createElement("canvas"));
      this.hueKnob = k = makeKnob(27);
      circleContainer.appendChild(k);
      return circleContainer;
    };
    makeLightnessSlider = function() {
      var k, lSlider;
      lSlider = document.createElement("div");
      style(lSlider, {
        display: "inline-block",
        width: "20px",
        height: radius * 2 - 22 + "px",
        marginLeft: "6px",
        borderRadius: "10px",
        boxShadow: "hsla(0, 100%, 100%, 0.1) 0 1px 2px 1px inset, hsla(0, 100%, 100%, 0.2) 0 1px inset, hsla(0, 0%, 0%, 0.4) 0 -1px 1px inset, hsla(0, 0%, 0%, 0.4) 0 1px 1px",
        position: "relative",
        top: "-11px"
      });
      lSlider._height = radius * 2 - 22;
      this.lKnob = k = makeKnob(22);
      style(k, {
        left: "-1px"
      });
      lSlider.appendChild(k);
      return lSlider;
    };
    makeColorPreview = function() {
      var colorPreview, originalColor, originalColorTransparent;
      colorPreview = document.createElement("div");
      originalColor = hslToCSS(this.refColor.h, this.refColor.s, this.refColor.l);
      originalColorTransparent = hslToCSS(this.refColor.h, this.refColor.s, this.refColor.l, 0);
      style(colorPreview, {
        boxShadow: "hsla(0, 0%, 0%, 0.5) 0 1px 5px, hsla(0, 100%, 100%, 0.4) 0 1px 1px inset, hsla(0, 0%, 0%, 0.3) 0 -1px 1px inset",
        height: "25px",
        marginTop: "6px",
        borderRadius: "3px",
        backgroundImage: "-webkit-linear-gradient(-20deg, " + originalColorTransparent + ", " + originalColorTransparent + " 69%, " + originalColor + " 70%, " + originalColor + ")"
      });
      style(colorPreview, {
        backgroundImage: "-moz-linear-gradient(-20deg, " + originalColorTransparent + ", " + originalColorTransparent + " 69%, " + originalColor + " 70%, " + originalColor + ")"
      });
      return colorPreview;
    };
    makeKnob = function(size) {
      var el;
      el = document.createElement("div");
      el.className = "knob";
      style(el, {
        position: "absolute",
        width: size + "px",
        height: size + "px",
        backgroundColor: "red",
        borderRadius: Math.floor(size / 2) + "px",
        cursor: "pointer",
        backgroundImage: "-webkit-gradient(radial, 50% 0%, 0, 50% 0%, 15, color-stop(0%, rgba(255, 255, 255, 0.8)), color-stop(100%, rgba(255, 255, 255, 0.2)))",
        boxShadow: "white 0px 1px 1px inset, rgba(0, 0, 0, 0.4) 0px -1px 1px inset, rgba(0, 0, 0, 0.4) 0px 1px 4px 0px, rgba(0, 0, 0, 0.6) 0 0 2px"
      });
      style(el, {
        backgroundImage: "radial-gradient(circle at center top, rgba(255,255,255,0.8), rgba(255, 255, 255, 0.2) 15px"
      });
      return el;
    };
    Picker.prototype.presentModal = function(x, y) {
      var modalFrame;
      style(this.el, {
        left: x + "px",
        top: y - 10 + "px",
        opacity: "0",
        webkitTransition: "0.15s",
        MozTransition: "0.15s"
      });
      modalFrame = document.createElement("div");
      modalFrame.style.position = "fixed";
      modalFrame.style.top = modalFrame.style.left = modalFrame.style.bottom = modalFrame.style.right = "0";
      modalFrame.style.zIndex = "999";
      modalFrame.onclick = function(_this) {
        return function() {
          var end;
          document.body.removeChild(modalFrame);
          _this.el.style.top = y + 10 + "px";
          _this.el.style.opacity = 0;
          end = function() {
            document.body.removeChild(_this.el);
            _this.el.removeEventListener("webkitTransitionEnd", end);
            return _this.el.removeEventListener("transitionend", end);
          };
          _this.el.addEventListener("webkitTransitionEnd", end);
          _this.el.addEventListener("transitionend", end);
          return _this.emit("closed");
        };
      }(this);
      document.body.appendChild(modalFrame);
      document.body.appendChild(this.el);
      this.el.offsetHeight;
      this.el.style.opacity = "1";
      this.el.style.top = y + "px";
      return this;
    };
    Picker.prototype.presentModalBeneath = function(el) {
      var elPos, x, y;
      elPos = el.getBoundingClientRect();
      x = elPos.left + window.scrollX;
      y = elPos.bottom + window.scrollY + 4;
      return this.presentModal(x, y);
    };
    return Picker;
  }();
  window.thistle = {
    Picker: Picker,
    isValidCSSColor: isValidCSSColor
  };
})).call(this);

if (typeof Color === "undefined") var Color = {};

if (typeof Color.Space === "undefined") Color.Space = {};

(function() {
  "use strict";
  var useEval = false;
  var functions = {};
  var shortcuts = {
    "HEX24>HSL": "HEX24>RGB>HSL",
    "HEX32>HSLA": "HEX32>RGBA>HSLA",
    "HEX24>CMYK": "HEX24>RGB>CMY>CMYK",
    "RGB>CMYK": "RGB>CMY>CMYK"
  };
  var root = Color.Space = function(color, route) {
    if (shortcuts[route]) {
      route = shortcuts[route];
    }
    var r = route.split(">");
    if (typeof color === "object" && color[0] >= 0) {
      var type = r[0];
      var tmp = {};
      for (var i = 0; i < type.length; i++) {
        var str = type.substr(i, 1);
        tmp[str] = color[i];
      }
      color = tmp;
    }
    if (functions[route]) {
      return functions[route](color);
    }
    var f = "color";
    for (var pos = 1, key = r[0]; pos < r.length; pos++) {
      if (pos > 1) {
        key = key.substr(key.indexOf("_") + 1);
      }
      key += (pos === 0 ? "" : "_") + r[pos];
      color = root[key](color);
      if (useEval) {
        f = "Color.Space." + key + "(" + f + ")";
      }
    }
    if (useEval) {
      functions[route] = eval("(function(color) { return " + f + " })");
    }
    return color;
  };
  root.RGB_W3 = function(o) {
    return "rgb(" + (o.R >> 0) + "," + (o.G >> 0) + "," + (o.B >> 0) + ")";
  };
  root.RGBA_W3 = function(o) {
    var alpha = typeof o.A === "number" ? o.A / 255 : 1;
    return "rgba(" + (o.R >> 0) + "," + (o.G >> 0) + "," + (o.B >> 0) + "," + alpha + ")";
  };
  root.W3_RGB = function(o) {
    o = o.substr(4, o.length - 5).split(",");
    return {
      R: parseInt(o[0], 10),
      G: parseInt(o[1], 10),
      B: parseInt(o[2], 10)
    };
  };
  root.W3_RGBA = function(o) {
    o = o.substr(5, o.length - 6).split(",");
    return {
      R: parseInt(o[0], 10),
      G: parseInt(o[1], 10),
      B: parseInt(o[2], 10),
      A: parseFloat(o[3]) * 255
    };
  };
  root.HSL_W3 = function(o) {
    return "hsl(" + (o.H + .5 >> 0) + "," + (o.S + .5 >> 0) + "%," + (o.L + .5 >> 0) + "%)";
  };
  root.HSLA_W3 = function(o) {
    var alpha = typeof o.A === "number" ? o.A / 255 : 1;
    return "hsla(" + (o.H + .5 >> 0) + "," + (o.S + .5 >> 0) + "%," + (o.L + .5 >> 0) + "%," + alpha + ")";
  };
  root.W3_HSL = function(o) {
    var start = o.indexOf("(") + 1;
    var end = o.indexOf(")");
    o = o.substr(start, end - start).split(",");
    return {
      H: parseInt(o[0], 10),
      S: parseInt(o[1], 10),
      L: parseInt(o[2], 10)
    };
  };
  root.W3_HSLA = function(o) {
    var start = o.indexOf("(") + 1;
    var end = o.indexOf(")");
    o = o.substr(start, end - start).split(",");
    return {
      H: parseInt(o[0], 10),
      S: parseInt(o[1], 10),
      L: parseInt(o[2], 10),
      A: parseFloat(o[3], 10) * 255
    };
  };
  root.W3_HEX = root.W3_HEX24 = function(o) {
    if (o.substr(0, 1) === "#") o = o.substr(1);
    if (o.length === 3) o = o[0] + o[0] + o[1] + o[1] + o[2] + o[2];
    return parseInt("0x" + o, 16);
  };
  root.W3_HEX32 = function(o) {
    if (o.substr(0, 1) === "#") o = o.substr(1);
    if (o.length === 6) {
      return parseInt("0xFF" + o, 10);
    } else {
      return parseInt("0x" + o, 16);
    }
  };
  root.HEX_W3 = root.HEX24_W3 = function(o, maxLength) {
    if (!maxLength) maxLength = 6;
    if (!o) o = 0;
    var n;
    var z = o.toString(16);
    n = z.length;
    while (n < maxLength) {
      z = "0" + z;
      n++;
    }
    n = z.length;
    while (n > maxLength) {
      z = z.substr(1);
      n--;
    }
    return "#" + z;
  };
  root.HEX32_W3 = function(o) {
    return root.HEX_W3(o, 8);
  };
  root.HEX_RGB = root.HEX24_RGB = function(o) {
    return {
      R: o >> 16,
      G: o >> 8 & 255,
      B: o & 255
    };
  };
  root.HEX32_RGBA = function(o) {
    return {
      R: o >>> 16 & 255,
      G: o >>> 8 & 255,
      B: o & 255,
      A: o >>> 24
    };
  };
  root.RGBA_HEX32 = function(o) {
    return (o.A << 24 | o.R << 16 | o.G << 8 | o.B) >>> 0;
  };
  root.RGB_HEX24 = root.RGB_HEX = function(o) {
    if (o.R < 0) o.R = 0;
    if (o.G < 0) o.G = 0;
    if (o.B < 0) o.B = 0;
    if (o.R > 255) o.R = 255;
    if (o.G > 255) o.G = 255;
    if (o.B > 255) o.B = 255;
    return o.R << 16 | o.G << 8 | o.B;
  };
  root.RGB_CMY = function(o) {
    return {
      C: 1 - o.R / 255,
      M: 1 - o.G / 255,
      Y: 1 - o.B / 255
    };
  };
  root.RGBA_HSLA = root.RGB_HSL = function(o) {
    var _R = o.R / 255, _G = o.G / 255, _B = o.B / 255, min = Math.min(_R, _G, _B), max = Math.max(_R, _G, _B), D = max - min, H, S, L = (max + min) / 2;
    if (D === 0) {
      H = 0;
      S = 0;
    } else {
      if (L < .5) S = D / (max + min); else S = D / (2 - max - min);
      var DR = ((max - _R) / 6 + D / 2) / D;
      var DG = ((max - _G) / 6 + D / 2) / D;
      var DB = ((max - _B) / 6 + D / 2) / D;
      if (_R === max) H = DB - DG; else if (_G === max) H = 1 / 3 + DR - DB; else if (_B === max) H = 2 / 3 + DG - DR;
      if (H < 0) H += 1;
      if (H > 1) H -= 1;
    }
    return {
      H: H * 360,
      S: S * 100,
      L: L * 100,
      A: o.A
    };
  };
  root.RGBA_HSVA = root.RGB_HSV = function(o) {
    var _R = o.R / 255, _G = o.G / 255, _B = o.B / 255, min = Math.min(_R, _G, _B), max = Math.max(_R, _G, _B), D = max - min, H, S, V = max;
    if (D === 0) {
      H = 0;
      S = 0;
    } else {
      S = D / max;
      var DR = ((max - _R) / 6 + D / 2) / D;
      var DG = ((max - _G) / 6 + D / 2) / D;
      var DB = ((max - _B) / 6 + D / 2) / D;
      if (_R === max) H = DB - DG; else if (_G === max) H = 1 / 3 + DR - DB; else if (_B === max) H = 2 / 3 + DG - DR;
      if (H < 0) H += 1;
      if (H > 1) H -= 1;
    }
    return {
      H: H * 360,
      S: S * 100,
      V: V * 100,
      A: o.A
    };
  };
  root.CMY_RGB = function(o) {
    return {
      R: Math.max(0, (1 - o.C) * 255),
      G: Math.max(0, (1 - o.M) * 255),
      B: Math.max(0, (1 - o.Y) * 255)
    };
  };
  root.CMY_CMYK = function(o) {
    var C = o.C;
    var M = o.M;
    var Y = o.Y;
    var K = Math.min(Y, Math.min(M, Math.min(C, 1)));
    C = Math.round((C - K) / (1 - K) * 100);
    M = Math.round((M - K) / (1 - K) * 100);
    Y = Math.round((Y - K) / (1 - K) * 100);
    K = Math.round(K * 100);
    return {
      C: C,
      M: M,
      Y: Y,
      K: K
    };
  };
  root.CMYK_CMY = function(o) {
    return {
      C: o.C * (1 - o.K) + o.K,
      M: o.M * (1 - o.K) + o.K,
      Y: o.Y * (1 - o.K) + o.K
    };
  };
  root.HSLA_RGBA = root.HSL_RGB = function(o) {
    var H = o.H / 360;
    var S = o.S / 100;
    var L = o.L / 100;
    var R, G, B;
    var temp1, temp2, temp3;
    if (S === 0) {
      R = G = B = L;
    } else {
      if (L < .5) temp2 = L * (1 + S); else temp2 = L + S - S * L;
      temp1 = 2 * L - temp2;
      temp3 = H + 1 / 3;
      if (temp3 < 0) temp3 += 1;
      if (temp3 > 1) temp3 -= 1;
      if (6 * temp3 < 1) R = temp1 + (temp2 - temp1) * 6 * temp3; else if (2 * temp3 < 1) R = temp2; else if (3 * temp3 < 2) R = temp1 + (temp2 - temp1) * (2 / 3 - temp3) * 6; else R = temp1;
      temp3 = H;
      if (temp3 < 0) temp3 += 1;
      if (temp3 > 1) temp3 -= 1;
      if (6 * temp3 < 1) G = temp1 + (temp2 - temp1) * 6 * temp3; else if (2 * temp3 < 1) G = temp2; else if (3 * temp3 < 2) G = temp1 + (temp2 - temp1) * (2 / 3 - temp3) * 6; else G = temp1;
      temp3 = H - 1 / 3;
      if (temp3 < 0) temp3 += 1;
      if (temp3 > 1) temp3 -= 1;
      if (6 * temp3 < 1) B = temp1 + (temp2 - temp1) * 6 * temp3; else if (2 * temp3 < 1) B = temp2; else if (3 * temp3 < 2) B = temp1 + (temp2 - temp1) * (2 / 3 - temp3) * 6; else B = temp1;
    }
    return {
      R: R * 255,
      G: G * 255,
      B: B * 255,
      A: o.A
    };
  };
  root.HSVA_RGBA = root.HSV_RGB = function(o) {
    var H = o.H / 360;
    var S = o.S / 100;
    var V = o.V / 100;
    var R, G, B, D, A, C;
    if (S === 0) {
      R = G = B = Math.round(V * 255);
    } else {
      if (H >= 1) H = 0;
      H = 6 * H;
      D = H - Math.floor(H);
      A = Math.round(255 * V * (1 - S));
      B = Math.round(255 * V * (1 - S * D));
      C = Math.round(255 * V * (1 - S * (1 - D)));
      V = Math.round(255 * V);
      switch (Math.floor(H)) {
       case 0:
        R = V;
        G = C;
        B = A;
        break;
       case 1:
        R = B;
        G = V;
        B = A;
        break;
       case 2:
        R = A;
        G = V;
        B = C;
        break;
       case 3:
        R = A;
        G = B;
        B = V;
        break;
       case 4:
        R = C;
        G = A;
        B = V;
        break;
       case 5:
        R = V;
        G = A;
        B = B;
        break;
      }
    }
    return {
      R: R,
      G: G,
      B: B,
      A: o.A
    };
  };
})();

Inlet = function() {
  function inlet(ed, options) {
    var editor = ed;
    var slider;
    var picker;
    var clicker;
    if (!options) options = {};
    if (!options.picker) options.picker = {};
    if (!options.slider) options.slider = {};
    if (!options.clicker) options.clicker = {};
    var container = options.container || document.body;
    var topOffset = options.picker.topOffset || 220;
    var bottomOffset = options.picker.bottomOffset || 16;
    var topBoundary = options.picker.topBoundary || 250;
    var leftOffset = options.picker.leftOffset || 75;
    var yOffset = options.slider.yOffset || 15;
    var xOffset = options.slider.xOffset || 0;
    var sliderWidth = options.slider.width;
    var horizontalMode = options.horizontalMode || "page";
    var fixedContainer = options.fixedContainer;
    var sliderCB = options.slider.callback || function(active) {};
    var pickerCB = options.picker.callback || function(active) {};
    var clickerCB = options.clicker.callback || function(active) {};
    var wrapper = editor.getWrapperElement();
    wrapper.addEventListener("mouseup", onClick);
    document.body.addEventListener("mouseup", windowOnClick);
    editor.setOption("onKeyEvent", onKeyDown);
    var clickerDiv = document.createElement("div");
    clickerDiv.className = "inlet_clicker";
    clickerDiv.style.visibility = "hidden";
    clickerDiv.style.position = "absolute";
    container.appendChild(clickerDiv);
    var clicker = document.createElement("input");
    clicker.className = "checkbox";
    clicker.setAttribute("type", "checkbox");
    clicker.addEventListener("change", onClicker);
    clickerDiv.appendChild(clicker);
    function onClicker(event) {
      var value = String(clicker.checked);
      var cursor = editor.getCursor(true);
      var boolean = getMatch(cursor, "boolean");
      if (!boolean) return;
      var start = {
        line: cursor.line,
        ch: boolean.start
      };
      var end = {
        line: cursor.line,
        ch: boolean.end
      };
      editor.replaceRange(value, start, end);
    }
    var sliderDiv = document.createElement("div");
    sliderDiv.className = "inlet_slider";
    sliderDiv.style.visibility = "hidden";
    if (sliderWidth) {
      sliderDiv.style.width = sliderWidth;
    }
    if (fixedContainer) {
      sliderDiv.style.position = "fixed";
    } else {
      sliderDiv.style.position = "absolute";
    }
    sliderDiv.style.top = 0;
    container.appendChild(sliderDiv);
    var slider = document.createElement("input");
    slider.className = "range";
    slider.setAttribute("type", "range");
    slider.addEventListener("input", onSlide);
    slider.addEventListener("change", onSlide);
    var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
    if (!isFirefox) slider.addEventListener("mouseup", onSlideMouseUp);
    sliderDiv.appendChild(slider);
    function onSlide(event) {
      var value = String(slider.value);
      var cursor = editor.getCursor(true);
      var number = getMatch(cursor, "number");
      if (!number) return;
      var start = {
        line: cursor.line,
        ch: number.start
      };
      var end = {
        line: cursor.line,
        ch: number.end
      };
      editor.dragging = true;
      editor.replaceRange(value, start, end);
    }
    function onSlideMouseUp(event) {
      slider.value = 0;
      var cursor = editor.getCursor(true);
      var number = getMatch(cursor, "number");
      if (!number) return;
      var value = parseFloat(number.string);
      var sliderRange = getSliderRange(value);
      slider.setAttribute("value", value);
      slider.setAttribute("step", sliderRange.step);
      slider.setAttribute("min", sliderRange.min);
      slider.setAttribute("max", sliderRange.max);
      slider.value = value;
      editor.dragging = false;
    }
    var clickTarget;
    function windowOnClick(evt) {
      if (evt.target === clickTarget || evt.target === sliderDiv || evt.target === slider || evt.target === clickerDiv || evt.target === clicker) return;
      sliderDiv.style.visibility = "hidden";
      clickerDiv.style.visibility = "hidden";
    }
    var LEFT = 37;
    var UP = 38;
    var RIGHT = 39;
    var DOWN = 40;
    function onKeyDown() {
      if (arguments.length == 1) {
        event = arguments[0];
      } else {
        event = arguments[1];
      }
      if (event.keyCode == LEFT || event.keyCode == DOWN) {
        if (sliderDiv.style.visibility === "visible") {
          slider.stepDown(1);
          onSlide();
          return true;
        } else if (event.altKey) {
          onClick();
        } else {}
      } else if (event.keyCode == RIGHT || event.keyCode == UP) {
        if (sliderDiv.style.visibility === "visible") {
          slider.stepUp(1);
          onSlide();
          return true;
        } else if (event.altKey) {
          onClick();
        } else {}
      } else {
        sliderDiv.style.visibility = "hidden";
      }
    }
    var pickerCallback = function(color, type) {
      var cursor = editor.getCursor();
      if (!type) return;
      var match = getMatch(cursor, type);
      var start = {
        line: cursor.line,
        ch: match.start
      };
      var end = {
        line: cursor.line,
        ch: match.end
      };
      editor.picking = true;
      editor.replaceRange(color, start, end);
      setTimeout(function() {
        editor.picking = false;
      }, 100);
    };
    picker = new thistle.Picker("#ffffff");
    function onClick(ev) {
      if (editor.somethingSelected()) {
        return;
      }
      clickTarget = ev.target;
      var cursor = editor.getCursor(true);
      var token = editor.getTokenAt(cursor);
      cursorOffset = editor.cursorCoords(true, "page");
      var leftBase = editor.cursorCoords(true, horizontalMode).left;
      var numberMatch = getMatch(cursor, "number");
      var hslMatch = getMatch(cursor, "hsl");
      var hexMatch = getMatch(cursor, "hex");
      var rgbMatch = getMatch(cursor, "rgb");
      var booleanMatch = getMatch(cursor, "boolean");
      var pickerTop = cursorOffset.top - topOffset;
      if (cursorOffset.top < topBoundary) {
        pickerTop = cursorOffset.top + bottomOffset;
      }
      var pickerLeft = leftBase - leftOffset;
      sliderDiv.style.visibility = "hidden";
      clickerDiv.style.visibility = "hidden";
      if (hexMatch) {
        var color = hexMatch.string;
        picker = new thistle.Picker(color);
        picker.setCSS(color);
        picker.presentModal(pickerLeft, pickerTop);
        picker.on("changed", function() {
          picked = picker.getCSS();
          picked = Color.Space(picked, "W3>HSL>RGB>HEX24>W3");
          pickerCallback(picked, "hex");
        });
      } else if (hslMatch) {
        var color = hslMatch.string;
        picker = new thistle.Picker(color);
        picker.setCSS(color);
        picker.presentModal(pickerLeft, pickerTop);
        picker.on("changed", function() {
          picked = picker.getCSS();
          pickerCallback(picked, "hsl");
        });
      } else if (rgbMatch) {
        var color = rgbMatch.string;
        picker = new thistle.Picker(color);
        picker.setCSS(color);
        picker.presentModal(pickerLeft, pickerTop);
        picker.on("changed", function() {
          picked = picker.getCSS();
          picked = Color.Space(picked, "W3>HSL>RGB>W3");
          pickerCallback(picked, "rgb");
        });
      } else if (numberMatch) {
        slider.value = 0;
        var value = parseFloat(numberMatch.string);
        var sliderRange = getSliderRange(value);
        slider.setAttribute("value", value);
        slider.setAttribute("step", sliderRange.step);
        slider.setAttribute("min", sliderRange.min);
        slider.setAttribute("max", sliderRange.max);
        slider.value = value;
        var sliderTop = cursorOffset.top - yOffset;
        var sliderStyle = window.getComputedStyle(sliderDiv);
        var sliderWidth = getPixels(sliderStyle.width);
        var sliderLeft = leftBase - sliderWidth / 2 + xOffset;
        sliderDiv.style.top = sliderTop - 10 + "px";
        sliderDiv.style.left = sliderLeft + "px";
        sliderDiv.style.visibility = "visible";
      } else if (booleanMatch) {
        var clickerTop = cursorOffset.top - yOffset;
        var clickerStyle = window.getComputedStyle(clickerDiv);
        var clickerWidth = getPixels(clickerStyle.width);
        var clickerLeft = leftBase - clickerWidth / 2 + xOffset;
        var value = JSON.parse(booleanMatch.string);
        if (value) {
          clickerDiv.removeChild(clicker);
          clicker = document.createElement("input");
          clicker.className = "checkbox";
          clicker.setAttribute("type", "checkbox");
          clicker.setAttribute("checked", "checked");
          clicker.addEventListener("change", onClicker);
          clickerDiv.appendChild(clicker);
        } else {
          clickerDiv.removeChild(clicker);
          clicker = document.createElement("input");
          clicker.className = "checkbox";
          clicker.setAttribute("type", "checkbox");
          clicker.addEventListener("change", onClicker);
          clickerDiv.appendChild(clicker);
        }
        clickerDiv.style.top = clickerTop - 3 + "px";
        clickerDiv.style.left = clickerLeft + "px";
        clickerDiv.style.visibility = "visible";
      } else {}
    }
    function getSliderRange(value) {
      var range, step, sliderMin, sliderMax;
      if (value === 0) {
        range = [ -100, 100 ];
      } else {
        range = [ -value * 3, value * 5 ];
      }
      if (range[0] < range[1]) {
        min = range[0];
        max = range[1];
      } else {
        min = range[1];
        max = range[0];
      }
      if (max - min > 20) {
        step = 1;
      } else {
        step = (max - min) / 200;
      }
      return {
        min: min,
        max: max,
        step: step
      };
    }
    function getMatch(cursor, type) {
      if (!type) return;
      var re;
      switch (type.toLowerCase()) {
       case "boolean":
        re = /true|false/g;
        break;
       case "hsl":
        re = /hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)/g;
        break;
       case "rgb":
        re = /rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)/g;
        break;
       case "hex":
        re = /#[a-fA-F0-9]{3,6}/g;
        break;
       case "number":
        re = /[-]?\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g;
        break;
       default:
        throw new Error("invalid match selection");
        return;
      }
      var line = editor.getLine(cursor.line);
      var match = re.exec(line);
      while (match) {
        var val = match[0];
        var len = val.length;
        var start = match.index;
        var end = match.index + len;
        if (cursor.ch >= start && cursor.ch <= end) {
          match = null;
          return {
            start: start,
            end: end,
            string: val
          };
        }
        match = re.exec(line);
      }
      return;
    }
  }
  function getPixels(style) {
    var pix = 0;
    if (style.length > 2) {
      pix = parseFloat(style.slice(0, style.length - 2));
    }
    if (!pix) pix = 0;
    return pix;
  }
  function getOffset(el) {
    var _x = 0;
    var _y = 0;
    while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
      _x += el.offsetLeft - el.scrollLeft;
      _y += el.offsetTop - el.scrollTop;
      el = el.offsetParent;
    }
    return {
      top: _y,
      left: _x
    };
  }
  return inlet;
}();